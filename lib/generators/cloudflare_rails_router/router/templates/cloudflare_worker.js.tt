const APP_ORIGIN = "<%= CloudflareRailsRouter.configuration.app_origin %>";
const MARKETING_ORIGIN = "<%= CloudflareRailsRouter.configuration.marketing_origin %>";
const LOGIN_COOKIE_NAME = "<%= CloudflareRailsRouter.configuration.login_cookie_name %>";
const ROUTING_COOKIE_NAME = "<%= CloudflareRailsRouter.configuration.cookie_name %>";
const COOKIE_TTL = <%= CloudflareRailsRouter.configuration.cookie_ttl %>;
const CRAWLERS_TO = "<%= CloudflareRailsRouter.configuration.crawlers_to %>";

addEventListener('fetch', event => {
  event.respondWith(handleRequest(event.request));
});

async function handleRequest(request) {
  const url = new URL(request.url);
  const cookies = parseCookies(request.headers.get('Cookie') || '');
  const userAgent = request.headers.get('User-Agent') || '';
  
  // Handle cm=1 parameter to clear cookies
  if (url.searchParams.get('cm') === '1') {
    url.searchParams.delete('cm');
    const response = await fetch(url.toString(), request);
    const newResponse = new Response(response.body, response);
    newResponse.headers.append('Set-Cookie', `${ROUTING_COOKIE_NAME}=; Max-Age=0; Path=/`);
    newResponse.headers.append('Set-Cookie', `${LOGIN_COOKIE_NAME}=; Max-Age=0; Path=/`);
    return newResponse;
  }
  
  // Determine target origin
  let targetOrigin = MARKETING_ORIGIN;
  
  // Check if crawler
  const isCrawler = /bot|crawler|spider|crawling/i.test(userAgent);
  if (isCrawler) {
    targetOrigin = CRAWLERS_TO === 'app' ? APP_ORIGIN : MARKETING_ORIGIN;
  } 
  // Check if logged in (cookie exists with any value)
  else if (cookies[LOGIN_COOKIE_NAME]) {
    targetOrigin = APP_ORIGIN;
  }
  // Check routing cookie
  else if (cookies[ROUTING_COOKIE_NAME] === 'app') {
    targetOrigin = APP_ORIGIN;
  }
  
  // Proxy request to target origin
  const targetUrl = new URL(url.pathname + url.search, targetOrigin);
  const modifiedRequest = new Request(targetUrl, {
    method: request.method,
    headers: request.headers,
    body: request.body
  });
  
  const response = await fetch(modifiedRequest);
  
  // Create new response to allow header modification
  const newResponse = new Response(response.body, response);
  
  // Set routing cookie if switching to marketing
  if (targetOrigin === MARKETING_ORIGIN && !cookies[ROUTING_COOKIE_NAME]) {
    newResponse.headers.append('Set-Cookie', 
      `${ROUTING_COOKIE_NAME}=marketing; Max-Age=${COOKIE_TTL}; Path=/; Secure; HttpOnly`
    );
  }
  
  return newResponse;
}

function parseCookies(cookieString) {
  return cookieString.split(';').reduce((acc, cookie) => {
    const [name, value] = cookie.trim().split('=');
    if (name && value) acc[name] = value;
    return acc;
  }, {});
}